#!/bin/bash

[ -s "$PWD/config" ] || \
(echo 'From the script directory, run: db/debian/import_releases'; exit)
. $PWD/config # import config


SQLFILE="${DIRECTORY[work]}/import_releases.sql"

function sql
{
  echo "$1" >> $SQLFILE
}

BASE=""
CONTENT_FILE="Packages.gz"
RELEASE_FILE="Release"

while getopts "b:c:r:" OPT; do
  case $OPT in
    b) BASE="$OPTARG";;
    c) CONTENT_FILE="$OPTARG";;
    r) RELEASE_FILE="$OPTARG";;
    ?)
      echo "usage: $0 [-b <BASE_DIR>] [-c <CONTENT_FILE>] [-r <RELEASE_FILE>]"
      echo "BASE: base directory where the files below are located"
      echo "CONTENT_FILE: the .gz file with the Debian metadata: Packages.gz (default) or Sources.gz"
      echo "RELEASE_FILE: the text file containing the release metadata: Release (default)"
      exit 1
    ;;
  esac
done

CONTENT_FILE="$BASE/$CONTENT_FILE"
RELEASE_FILE="$BASE/$RELEASE_FILE"

function insert_distribution
{
  sql "insert or ignore into Distributions (name) values ('$DISTRIBUTION');"
}

function insert_architecture
{
  for ARCHITECTURE in ${SELECTOR[architectures]}; do
    sql "insert or ignore into Architectures (name) values ('$ARCHITECTURE');"
  done
}

function insert_release
{
  for ARCHITECTURE in ${SELECTOR[architectures]}; do
    sql "insert or ignore into Releases select null, Distributions.id, Architectures.id, ${RELEASE[version]}, ${RELEASE[date]}, ${RELEASE[codename]}, ${RELEASE[status]}, ${RELEASE[description]} from Distributions, Architectures where Distributions.name = '$DISTRIBUTION' and Architectures.name = '$ARCHITECTURE';"
  done
}

function insert_selector_maintainer
{
  sql "insert or ignore into Maintainers values (null, ${SELECTOR[mname]}, ${SELECTOR[mmail]});"
}

function insert_selector_section
{
  sql "insert or ignore into Categories (name) values (${SELECTOR[section]});"
}

function insert_selector
{
  sql "insert or ignore into Selectors select null, Categories.id, Maintainers.id, ${SELECTOR[name]}, ${SELECTOR[version]}, ${SELECTOR[origin]}, ${SELECTOR[homepage]}, ${SELECTOR[description]} from Categories, Maintainers where Maintainers.name = ${SELECTOR[mname]} and Maintainers.email = ${SELECTOR[mmail]} and Categories.name = ${SELECTOR[section]};"
}

function insert_selector_into_release
{
  for ARCHITECTURE in ${SELECTOR[architectures]}; do
    sql "insert or ignore into Releases_have_Selectors select r.id, s.id from ReleasesView as r, SelectorsCategoryView as s where r.version = ${RELEASE[version]} and r.distribution = '$DISTRIBUTION' and r.architecture = '$ARCHITECTURE' and s.name = ${SELECTOR[name]} and s.version = ${SELECTOR[version]} and s.category = ${SELECTOR[section]};"
  done
}

function parse_selectors
{
  declare -a ATTRIBUTES=('name' 'section' 'version' 'origin' 'homepage' 'description' 'mname' 'mmail' 'architecture')
  declare -A SELECTOR
  
  zcat "$CONTENT_FILE" \
  | sed "s/'/''/g" \
  | sed ':a;N;$!ba;s/\n /\\\\n /g' \
  | sed 's/^Maintainer: \(.*\) <\(.*\)>$/MaintainerName: \1\nMaintainerEmail: \2/g' \
  | sed 's/^\(Section: \).*\/\(.*\)$/\1\2/g' \
  | sed 's/\(^Description:.*\)\(Homepage:[^\\]*\)\(.*\)/\1\3\n\2/g' \
  | while read KEY VALUE; do
    case "$KEY" in
      Package:) SELECTOR[name]="'$VALUE'";;
      Version:) SELECTOR[version]="'$VALUE'";;
      Section:) SELECTOR[section]="'$VALUE'";;
      MaintainerName:) SELECTOR[mname]="'$VALUE'";;
      MaintainerEmail:) SELECTOR[mmail]="'$VALUE'";;
      Homepage:) SELECTOR[homepage]="'$VALUE'";;
      Description:) SELECTOR[description]="'$VALUE'";;
      Architecture:) SELECTOR[architectures]="$VALUE";;
      Source:) SELECTOR[origin]="'$VALUE'";;
      '')
        for ATTRIBUTE in ${ATTRIBUTES[@]}; do
          SELECTOR[$ATTRIBUTE]=${SELECTOR[$ATTRIBUTE]:-null}
        done
        
        insert_architecture
        insert_release
        insert_selector_maintainer
        insert_selector_section
        insert_selector
        insert_selector_into_release
        
        unset SELECTOR
        declare -A SELECTOR
        ;;
    esac
  done
}

function parse_release
{
  declare -A RELEASE
  while read KEY VALUE; do
    case "$KEY" in
      Version:) RELEASE[version]="'$VALUE'";;
      Suite:) RELEASE[status]="'$VALUE'";;
      Codename:) RELEASE[codename]="'$VALUE'";;
      Date:) RELEASE[date]="'$VALUE'";;
      Description:) RELEASE[description]="'$VALUE'";;
    esac
  done

  parse_selectors
}

DISTRIBUTION='debian'

insert_distribution

cat $RELEASE_FILE | parse_release

cat $SQLFILE | sqlite3 $DB 2> $SQLFILE.error

